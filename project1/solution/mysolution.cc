// this is a silly solution
// just to show you how different
// components of this framework work
// please bring your wise to write
// a 'real' solution :)

#include <fstream>
#include <iostream>
#include <nlohmann/json.hpp>
#include <string>
using json = nlohmann::json;

void logInfo(std::string c) {
  std::cerr << "\033[1;32m[info]: " << c << "\033[0m\n";
}

void exampleUsage(json j) {
  logInfo("file name: " + j["name"].get<std::string>());
  for (auto v : j["ins"]) {
    logInfo(" [ins] " + v.get<std::string>());
  }
  for (auto v : j["outs"]) {
    logInfo(" [outs] " + v.get<std::string>());
  }
  logInfo("data type: " + j["data_type"].get<std::string>());
  logInfo("kernel: " + j["kernel"].get<std::string>());
}

void solveExample() {
  logInfo("Generating Example");
  std::ifstream i("./cases/example.json");
  json j;
  i >> j;
  std::string outputFileName = j["name"];
  exampleUsage(j);
  std::ofstream ofile("./kernels/" + outputFileName + ".cc", std::ios::out);
  // ofile << "#include \"../run.h\"\n\n";
  // ofile << "void kernel_example(float (&B)[32][16], float (&C)[32][16], float
  // "
  //          "(&A)[32][16]) {}";
  std::string cheat_src =
      "// this is supposed to be generated by codegen tool\n\
#include \"../run.h\"\n\
\n\
void kernel_example(float (&B)[32][16], float (&C)[32][16], float (&A)[32][16]) {\n\
    for (int i = 0; i < 32; ++i) {\n\
        for (int j = 0; j < 16; ++j) {\n\
            A[i][j] = B[i][j] * C[i][j];\n\
        }\n\
    }\n\
}";
  ofile << cheat_src;
  ofile.close();
}

void solveCase(int idx) {
  std::string inputFileName = "./cases/case" + std::to_string(idx) + ".json";
  std::ifstream i(inputFileName.c_str());
  if (i.fail()) {
    logInfo("File " + inputFileName + " does not exist");
    return;
  } else {
    logInfo("Generating " + std::to_string(idx));
  }
  json j;
  i >> j;
  std::string outputFileName = j["name"];
  // std::ofstream ofile("./kernels/" + outputFileName + ".cc", std::ios::out);
}
int main() {
  solveExample();
  for (int idx = 1; idx <= 10; ++idx) {
    solveCase(idx);
  }
  return 0;
}